scale_color_scico(palette = "berlin",
name = "Distance to next rain gauge [m]") +
theme_map() +
coord_sf(datum = 32632) +
guides(color = guide_colorbar(title.position = "top",
barwidth = unit(15, "lines"))) +
geom_label(
aes(
x = 626000,
y = 5200000,
label = glue("Average Distance: {round(m,2)} [m]")
),
family = "Times New Roman",
size = 5
) +
theme(
legend.title = element_text(family="Times New Roman"),
legend.text = element_text(family="Times New Roman"),
legend.position = c(.6,.2),
legend.direction = "horizontal"
)
ggplot() +
geom_sf(data=st) +
geom_sf(data = df_dis,
aes(col = as.numeric(distance))) +
scale_color_scico(palette = "berlin",
name = "Distance to next rain gauge [m]") +
theme_map() +
coord_sf(datum = 32632) +
guides(color = guide_colorbar(title.position = "top",
barwidth = unit(15, "lines"))) +
geom_label(
aes(
x = 626000,
y = 5200000,
label = glue("Average Distance: {round(m,2)} [m]")
),
family = "Times New Roman",
size = 5
) +
labs(
title = "Distance to next Rain Gauge"
) +
theme(
plot.title = element_text(family="Times New Roman")
legend.title = element_text(family="Times New Roman"),
legend.text = element_text(family="Times New Roman"),
legend.position = c(.6,.2),
legend.direction = "horizontal"
)
ggplot() +
geom_sf(data=st) +
geom_sf(data = df_dis,
aes(col = as.numeric(distance))) +
scale_color_scico(palette = "berlin",
name = "Distance to next rain gauge [m]") +
theme_map() +
coord_sf(datum = 32632) +
guides(color = guide_colorbar(title.position = "top",
barwidth = unit(15, "lines"))) +
geom_label(
aes(
x = 626000,
y = 5200000,
label = glue("Average Distance: {round(m,2)} [m]")
),
family = "Times New Roman",
size = 5
) +
labs(
title = "Distance to next Rain Gauge"
) +
theme(
plot.title = element_text(family="Times New Roman"),
legend.title = element_text(family="Times New Roman"),
legend.text = element_text(family="Times New Roman"),
legend.position = c(.6,.2),
legend.direction = "horizontal"
)
f = here(mahelp::file_dir(), "avg_distance.png")
f
ggsave(f, width=12, height=8)
ggplot() +
geom_sf(data=st) +
geom_sf(data = df_dis,
aes(col = as.numeric(distance))) +
scale_color_scico(palette = "berlin",
name = "Distance to next rain gauge [m]") +
theme_map() +
coord_sf(datum = 32632) +
guides(color = guide_colorbar(title.position = "top",
barwidth = unit(15, "lines"))) +
geom_label(
aes(
x = 626000,
y = 5200000,
label = glue("Average Distance: {round(m,2)} [m]")
),
family = "Times New Roman",
size = 5
) +
labs(
title = "Distance to next Rain Gauge"
) +
theme(
plot.title = element_text(family="Times New Roman"),
legend.text = element_text(family="Times New Roman"),
legend.position = c(.6,.2),
legend.direction = "horizontal"
)
ggplot() +
geom_sf(data=st) +
geom_sf(data = df_dis,
aes(col = as.numeric(distance))) +
scale_color_scico(palette = "berlin",
name = "Distance to next rain gauge [m]") +
theme_map() +
coord_sf(datum = 32632) +
guides(color = guide_colorbar(title.position = "top",
barwidth = unit(15, "lines"))) +
geom_label(
aes(
x = 626000,
y = 5200000,
label = glue("Average Distance: {round(m,2)} [m]")
),
family = "Times New Roman",
size = 5
) +
labs(
title = "Distance to next Rain Gauge"
) +
theme(
legend.title = element_text(family="Times New Roman"),
legend.text = element_text(family="Times New Roman"),
legend.position = c(.6,.2),
legend.direction = "horizontal"
)
ggplot() +
geom_sf(data=st) +
geom_sf(data = df_dis,
aes(col = as.numeric(distance))) +
scale_color_scico(palette = "berlin",
name = "Distance to next rain gauge [m]") +
theme_map() +
coord_sf(datum = 32632) +
guides(color = guide_colorbar(title.position = "top",
barwidth = unit(15, "lines"))) +
geom_label(
aes(
x = 626000,
y = 5200000,
label = glue("Average Distance: {round(m,2)} [m]")
),
family = "Times New Roman",
size = 5
) +
labs(
title = "Distance to next Rain Gauge"
) +
theme(
plot.title = element_text(family="Times New Roman", hjust=.5),
legend.title = element_text(family="Times New Roman"),
legend.text = element_text(family="Times New Roman"),
legend.position = c(.6,.2),
legend.direction = "horizontal"
)
f = here(mahelp::file_dir(), "avg_distance.png")
ggsave(f, width=12, height=8)
ggplot() +
geom_sf(data=st) +
geom_sf(data = df_dis,
aes(col = as.numeric(distance))) +
scale_color_scico(palette = "berlin",
name = "Distance to next rain gauge [m]") +
theme_map() +
coord_sf(datum = 32632) +
guides(color = guide_colorbar(title.position = "top",
barwidth = unit(15, "lines"))) +
geom_label(
aes(
x = 626000,
y = 5200000,
label = glue("Average Distance: {round(m,2)} [m]")
),
family = "Times New Roman",
size = 5
) +
labs(
title = "Distance to next Rain Gauge for each slide"
) +
theme(
plot.title = element_text(family="Times New Roman", hjust=.5),
legend.title = element_text(family="Times New Roman"),
legend.text = element_text(family="Times New Roman"),
legend.position = c(.6,.2),
legend.direction = "horizontal"
)
f = here(mahelp::file_dir(), "avg_distance.png")
ggsave(f, width=12, height=8)
plot_dir = here(file_dir(), "plot_dir")
thresh_dir = here(file_dir(), "thresh_dir")
thresh_file = here(thresh_dir, "thresholds.txt")
thresh_dir
for (i in c(plot_dir, thresh_dir)) {
if(!dir.exists(i)){
dir.create(i, recursive = T)
}
}
# -------------------------------------------------------------------------
# get the landslide data
landslides = readRDS(path_filtered_landsld_data)
landslides
# by distance
get_station_by_distance(landslides)
# -------------------------------------------------------------------------
# get the stations
stations.sf = get_station_information()
class(stations.sf)
# by distance
get_station_by_distance(position = landslides, station_sf = stations.sf)
# by distance
res = get_station_by_distance(position = landslides, station_sf = stations.sf)
class(res)
View(res)
View(res[[32]][[1]])
glimpse(res)
unnest(res, cols = c(stations))
plot_dir = here(file_dir(), "plot_dir")
thresh_dir = here(file_dir(), "thresh_dir")
thresh_file = here(thresh_dir, "thresholds.txt")
for (i in c(plot_dir, thresh_dir)) {
if(!dir.exists(i)){
dir.create(i, recursive = T)
}
}
# -------------------------------------------------------------------------
# get the landslide data
landslides = readRDS(path_filtered_landsld_data)
# -------------------------------------------------------------------------
# get the stations
stations.sf = get_station_information()
# by distance
res = get_station_by_distance(position = landslides, station_sf = stations.sf)
res$stations
stations = res$stations
stations = res$stations
stations
stations = res$stations %>% bind_rows()
stations
a = bind_rows(res, .id="hi")
View(a)
a = map_df(res)
a = imap_dfr(res, ~data.frame(
.x$id = .y
))
res
class(res)
# by distance (creates a list column of dataframes with each having three rows)
res = get_station_by_distance(position = landslides, station_sf = stations.sf)
stations = res$stations
a = imap_dfr(stations, ~data.frame(
.x$id = .y
))
class(stations)
a = imap_dfr(stations, ~data.frame(
.x[["id"]] = .y
))
# -------------------------------------------------------------------------
# give each dataframe an id
imap(station, ~data.frame(
.x[["id"]] = "a"
))
# -------------------------------------------------------------------------
# give each dataframe an id
map(station, ~data.frame(
.x[["id"]] = "a"
))
# -------------------------------------------------------------------------
# give each dataframe an id
map(stations, .x %>% mutate(id = "a"))
# -------------------------------------------------------------------------
# give each dataframe an id
map(stations, ~ .x %>% mutate(id = "a"))
# -------------------------------------------------------------------------
# give each dataframe an id
imap(stations, ~ .x %>% mutate(id = .y))
# -------------------------------------------------------------------------
# give each dataframe an id
stat_id = imap_dfr(stations, ~ .x %>% mutate(id = .y))
stat_id
# -------------------------------------------------------------------------
# give each dataframe an id
stat_id = imap_dfr(stations, ~ .x %>% mutate(id = .y))
library(raingauger)
stations[[1]]
t = stations[[1]]
read_rainfall(t$name)
plot_dir = here(file_dir(), "plot_dir")
thresh_dir = here(file_dir(), "thresh_dir")
thresh_file = here(thresh_dir, "thresholds.txt")
for (i in c(plot_dir, thresh_dir)) {
if(!dir.exists(i)){
dir.create(i, recursive = T)
}
}
# -------------------------------------------------------------------------
# get the landslide data
landslides = readRDS(path_filtered_landsld_data)
# -------------------------------------------------------------------------
# get the stations
stations.sf = get_station_information()
# by distance (creates a list column of dataframes with each having three rows)
res = get_station_by_distance(position = landslides, station_sf = stations.sf)
stations = res$stations
# -------------------------------------------------------------------------
# give each dataframe an id
stat_id = imap_dfr(stations, ~ .x %>% mutate(id = .y))
a = stations[[1]]
a
read_rainfall(station = a$name)
read_rainfall(station = a$name[[1]])
read_rainfall(station = a$name_2[[1]])
a$name
a$name_2
a
save(a, "~/test_data/stations.RDS")
dir.create("~/test_data")
save(a, "~/test_data/stations.RDS")
list.files("~/test_data/")
saveRDS(a, "~/test_data/stations.RDS")
devtools::install_github
devtools::install_github("mathrk/raingauger")
plot_dir = here(file_dir(), "plot_dir")
thresh_dir = here(file_dir(), "thresh_dir")
thresh_file = here(thresh_dir, "thresholds.txt")
for (i in c(plot_dir, thresh_dir)) {
if(!dir.exists(i)){
dir.create(i, recursive = T)
}
}
# -------------------------------------------------------------------------
# get the landslide data
landslides = readRDS(path_filtered_landsld_data)
# -------------------------------------------------------------------------
# get the stations
stations.sf = get_station_information()
# by distance (creates a list column of dataframes with each having three rows)
res = get_station_by_distance(position = landslides, station_sf = stations.sf)
stations.sf
stations = res$stations
stations
# -------------------------------------------------------------------------
# give each dataframe an id
stat_id = imap_dfr(stations, ~ .x %>% mutate(id = .y))
stations
a = stations[[1]]
a
read_rainfall(station =  a$name_from_file)
r = read_rainfall(station =  a$name_from_file)
class(r)
length(r)
View(er)
View(r)
stations[[1]]
# -------------------------------------------------------------------------
# for each station get the rainfall
rain = map(stations, ~raingauger::read_rainfall(.x$name_from_file))
# -------------------------------------------------------------------------
# for each station get the rainfall
rain = map(stations, ~raingauger::read_rainfall(station = .x$name_from_file))
usethis::edit_r_profile()
library(future.apply, quitely = T, warn.conflicts = F)
library(future.apply, quietly = T, warn.conflicts = F)
plan(multisession)
rain2 = future.apply::future_lapply(stations, function(x){raingauger::read_rainfall(station = .x$station_from_file)})
rain2 = future.apply::future_lapply(stations, function(x){raingauger::read_rainfall(station = x$station_from_file)})
rain2 = future.apply::future_lapply(stations, function(x){raingauger::read_rainfall(station = x$station_from_file[1:10])})
plan(multisession)
rain2 = future.apply::future_lapply(stations, function(x){raingauger::read_rainfall(station = x$station_from_file[1:10])})
plan(multisession)
rain2 = future.apply::future_lapply(stations[1:3], function(x){raingauger::read_rainfall(station = x$station_from_file)})
rain2
t = rain2[[1]]
t$info$data = t$data
class(t$info$info)
class(t$info)
class(t$data)
t$info$data = list(data = t$data)
t
glimpse(t$info)
remotes::install_github("mathrk/raingauger")
plot_dir = here(file_dir(), "plot_dir")
thresh_dir = here(file_dir(), "thresh_dir")
thresh_file = here(thresh_dir, "thresholds.txt")
# -------------------------------------------------------------------------
# get the landslide data
landslides = readRDS(path_filtered_landsld_data)
for (i in c(plot_dir, thresh_dir)) {
if(!dir.exists(i)){
dir.create(i, recursive = T)
}
}
# -------------------------------------------------------------------------
# get the stations
stations.sf = get_station_information()
plot_dir = here(file_dir(), "plot_dir")
thresh_dir = here(file_dir(), "thresh_dir")
thresh_file = here(thresh_dir, "thresholds.txt")
for (i in c(plot_dir, thresh_dir)) {
if(!dir.exists(i)){
dir.create(i, recursive = T)
}
}
# -------------------------------------------------------------------------
# get the landslide data
landslides = readRDS(path_filtered_landsld_data)
# -------------------------------------------------------------------------
# get the stations
stations.sf = get_station_information()
# by distance (creates a list column of dataframes with each having three rows)
res = get_station_by_distance(position = landslides, station_sf = stations.sf)
stations = res$stations
plan(multisession)
rain2 = future.apply::future_lapply(stations[1:3], function(x){raingauger::read_rainfall(station = x$station_from_file)})
t = rain2[[1]]
rain2
raingauger::read_rainfall
a = raingauger::read_rainfall
a
grep("info", a)
a
as.character(a)
remotes::install_github("mathrk/raingauger")
plot_dir = here(file_dir(), "plot_dir")
thresh_dir = here(file_dir(), "thresh_dir")
thresh_file = here(thresh_dir, "thresholds.txt")
for (i in c(plot_dir, thresh_dir)) {
if(!dir.exists(i)){
dir.create(i, recursive = T)
}
}
# -------------------------------------------------------------------------
# get the landslide data
landslides = readRDS(path_filtered_landsld_data)
# -------------------------------------------------------------------------
# get the stations
stations.sf = get_station_information()
# by distance (creates a list column of dataframes with each having three rows)
res = get_station_by_distance(position = landslides, station_sf = stations.sf)
stations = res$stations
# -------------------------------------------------------------------------
# give each dataframe an id
stat_id = imap_dfr(stations, ~ .x %>% mutate(id = .y))
rain = map(stations, ~raingauger::read_rainfall(station = .x$name_from_file))
plan(multisession)
rain2 = future.apply::future_lapply(stations[1:3], function(x){raingauger::read_rainfall(station = x$station_from_file)})
rain2
raingauger::read_rainfall
a = stations[[1]]
a
r = read_rainfall(a$name_from_file)
r
rain = map(stations, ~read_rainfall(.x$name_from_file))
rain = map(stations[1:3], ~read_rainfall(.x$name_from_file))
class(rain)
glimpse(rain)
x=rain[[1]]
a
x
class(x)
stations = x
map(stations, .x$data)
map(stations, ~.x$data)
x = stations[[1]]
x$data
class(x$data)
rain_3_15 = map(rain, function(x){
stations = x
rain315 = map(stations, ~ .x$data[[1]] %>%
mutate(
r = row_number()
))
})
rain_3_15
rain[[1]]
res[[1]]
# by distance (creates a list column of dataframes with each having three rows)
res = get_station_by_distance(position = landslides, station_sf = stations.sf)
res[[1]]
res
res$date
stations = res$stations
stations
class(stations)
length(stations)
glimpse(res)
glimpse(rain)
rain_3_15
rain_3_15[[1]]
a = rain_3_15[[1]]
a = rain_3_15[[1]]
slice_rain(a, res[1,]$date, res[1,]$date + 30)
slice_rain(a, res[1,]$date, to = res[1,]$date + 30)
d = res[1,]$date
d
class(d)
class(d + 30)
d + 30
slice_rain(a, start_date = d, end_date = d + 30)
saveRDS
saveRDS(a, "~/test_data/rain_example.Rdata")
